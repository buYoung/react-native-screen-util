import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens
import java.nio.file.Paths

buildscript {
    ext.versions = [
        'compose': '1.3.1',
        'composeActivity': '1.6.1',
        'composeCompiler': '1.3.2',
        'coroutine': '1.6.2',
        'kotlin': '1.6.21',
        'kotlinRuntime': '1.7.20',
        'kotlinCompilerVersion': '1.6.21',
        'ktx': '1.8.0',
        'ktxSupport': '2.4.1',
        'supportLibrary': '1.4.2',
        'gradle': '7.3.1',
        'kotlinVersion':'1.7.20',
        'composeFoundation':'1.3.1',
        'jetpackLifecycle':'2.2.0',
        'gradleDownloadTask':'5.0.1',
        'windowVersion':'1.0.0'
    ]

    repositories {
        google()
        mavenCentral()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://maven.google.com")
        }
        maven {
            url = uri("https://dl.google.com/dl/android/maven2/")
        }
    }

    dependencies {
        classpath "de.undercouch:gradle-download-task:${versions.gradleDownloadTask}"
        classpath "com.android.tools.build:gradle:${versions.gradle}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        // noinspection DifferentKotlinGradleVersion
    }
}

def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: 'de.undercouch.download'
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["ScreenUtill_" + name]
}

def getExtOrIntegerDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["ScreenUtill_" + name]).toInteger()
}

android {
    compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

    defaultConfig {
        minSdkVersion getExtOrIntegerDefault("minSdkVersion")
        targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    buildFeatures {
        compose true
    }
    lintOptions {
        disable "GradleCompatible"
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    composeOptions {
        kotlinCompilerExtensionVersion "${versions.compose}"
    }
}

repositories {
    google()
    mavenCentral()
    maven {
        url = uri("https://plugins.gradle.org/m2/")
    }
    maven {
        url = uri("https://maven.google.com")
    }
    maven {
        url = uri("https://dl.google.com/dl/android/maven2/")
    }
    def found = false
    def defaultDir = null
    def androidSourcesName = 'React Native sources'

    if (rootProject.ext.has('reactNativeAndroidRoot')) {
        defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
    } else {
        defaultDir = new File(
            projectDir as File,
            '/../../../node_modules/react-native/android'
        )
    }

    if (defaultDir.exists()) {
        maven {
            url defaultDir.toString()
            name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
        found = true
    } else {
        def parentDir = rootProject.projectDir

        1.upto(5, {
            if (found) return true
            parentDir = parentDir.parentFile

            def androidSourcesDir = new File(
                parentDir,
                'node_modules/react-native'
            )

            def androidPrebuiltBinaryDir = new File(
                parentDir,
                'node_modules/react-native/android'
            )

            if (androidPrebuiltBinaryDir.exists()) {
                maven {
                    url androidPrebuiltBinaryDir.toString()
                    name androidSourcesName
                }

                logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
                found = true
            } else if (androidSourcesDir.exists()) {
                maven {
                    url androidSourcesDir.toString()
                    name androidSourcesName
                }

                logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
                found = true
            }
        })
    }

    if (!found) {
        throw new GradleException(
            "${project.name}: unable to locate React Native android sources. " +
                "Ensure you have you installed React Native as a dependency in your project and try again."
        )
    }
}

dependencies {
    // For < 0.71, this will be from the local maven repo
    // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlinRuntime}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutine}"
    def composeBom = platform("androidx.compose:compose-bom:2022.10.00")
    implementation composeBom
    androidTestImplementation composeBom

    implementation "androidx.compose.compiler:compiler:${versions.composeCompiler}"
    implementation "androidx.compose.runtime:runtime:${versions.compose}"
    implementation "androidx.compose.ui:ui-tooling:${versions.compose}"
    implementation "androidx.window:window:${versions.windowVersion}"
    implementation "androidx.compose.foundation:foundation-layout:${versions.compose}"
    implementation "androidx.compose.material:material:${versions.compose}"
    implementation "androidx.compose.runtime:runtime-saveable:${versions.compose}"
    implementation "androidx.activity:activity-compose:${versions.composeActivity}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.jetpackLifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.jetpackLifecycle}"
    implementation "androidx.compose.foundation:foundation:${versions.composeFoundation}"
}

if (isNewArchitectureEnabled()) {
    react {
        jsRootDir = file("../src/")
        libraryName = "ScreenUtill"
        codegenJavaPackageName = "com.screenutill"
    }
}
